{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/haseebkhan/Documents/NewProjects/meetup-app/pages/[meetupId]/index.js\";\nimport { MongoClient } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction SingleMeet() {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: \"https://www.narcity.com/media-library/image.png?id=26004869&width=1245&quality=85&coordinates=0%2C39%2C0%2C39&height=700\",\n    title: \"The Single Meet Up Detail Page CN Tower Version Hard Coded\",\n    address: \"Somewhere in Toronto\",\n    description: \"A description of the CN Tower that is hard-coded.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://HKBob:HK078614@cluster0.bvuwm.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://HKBob:HK078614@cluster0.bvuwm.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: meetupId\n  }).toArray();\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: meetupId,\n        image: 'https://www.narcity.com/media-library/image.png?id=26004869&width=1245&quality=85&coordinates=0%2C39%2C0%2C39&height=700',\n        title: 'The Single Meet Up Detail Page CN Tower Version Hard Coded',\n        address: 'Somewhere in Toronto',\n        description: 'A description of the CN Tower that is hard-coded.'\n      }\n    }\n  };\n}\nexport default SingleMeet;","map":{"version":3,"sources":["/Users/haseebkhan/Documents/NewProjects/meetup-app/pages/[meetupId]/index.js"],"names":["MongoClient","MeetupDetail","SingleMeet","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","props","meetupData","id","image","title","address","description"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,UAAT,GAAsB;AACpB,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAC,0HADR;AAEE,IAAA,KAAK,EAAC,4DAFR;AAGE,IAAA,OAAO,EAAC,sBAHV;AAIE,IAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMJ,WAAW,CAACK,OAAZ,CACnB,6FADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMf,MAAM,GAAG,MAAMJ,WAAW,CAACK,OAAZ,CACnB,6FADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAC3CiB,OAD0B,CAClB;AAAEb,IAAAA,GAAG,EAAEQ;AAAP,GADkB,EAE1BP,OAF0B,EAA7B;AAIAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLY,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACVC,QAAAA,EAAE,EAAER,QADM;AAEVS,QAAAA,KAAK,EACH,0HAHQ;AAIVC,QAAAA,KAAK,EAAE,4DAJG;AAKVC,QAAAA,OAAO,EAAE,sBALC;AAMVC,QAAAA,WAAW,EAAE;AANH;AADP;AADF,GAAP;AAYD;AAED,eAAe7B,UAAf","sourcesContent":["import { MongoClient } from 'mongodb';\n\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction SingleMeet() {\n  return (\n    <MeetupDetail\n      image=\"https://www.narcity.com/media-library/image.png?id=26004869&width=1245&quality=85&coordinates=0%2C39%2C0%2C39&height=700\"\n      title=\"The Single Meet Up Detail Page CN Tower Version Hard Coded\"\n      address=\"Somewhere in Toronto\"\n      description=\"A description of the CN Tower that is hard-coded.\"\n    />\n  );\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    'mongodb+srv://HKBob:HK078614@cluster0.bvuwm.mongodb.net/meetups?retryWrites=true&w=majority'\n  );\n  const db = client.db();\n\n  const meetupsCollection = db.collection('meetups');\n\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n\n  return {\n    fallback: false,\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n}\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n\n  const client = await MongoClient.connect(\n    'mongodb+srv://HKBob:HK078614@cluster0.bvuwm.mongodb.net/meetups?retryWrites=true&w=majority'\n  );\n  const db = client.db();\n\n  const meetupsCollection = db.collection('meetups');\n\n  const selectedMeetup = await meetupsCollection\n    .findOne({ _id: meetupId })\n    .toArray();\n\n  client.close();\n\n  return {\n    props: {\n      meetupData: {\n        id: meetupId,\n        image:\n          'https://www.narcity.com/media-library/image.png?id=26004869&width=1245&quality=85&coordinates=0%2C39%2C0%2C39&height=700',\n        title: 'The Single Meet Up Detail Page CN Tower Version Hard Coded',\n        address: 'Somewhere in Toronto',\n        description: 'A description of the CN Tower that is hard-coded.',\n      },\n    },\n  };\n}\n\nexport default SingleMeet;\n"]},"metadata":{},"sourceType":"module"}